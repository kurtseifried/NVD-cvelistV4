{
  "data_type": "CVE",
  "data_format": "MITRE",
  "data_version": "4.0",
  "CVE_data_meta": {
    "ID": "CVE-2021-24208",
    "ASSIGNER": "contact@wpscan.com"
  },
  "problemtype": {
    "problemtype_data": [
      {
        "description": [
          {
            "lang": "en",
            "value": "CWE-79"
          }
        ]
      }
    ]
  },
  "references": {
    "reference_data": [
      {
        "url": "https://wpscan.com/vulnerability/c20e243d-b0de-4ae5-9a0d-b9d02c9b8141",
        "name": "https://wpscan.com/vulnerability/c20e243d-b0de-4ae5-9a0d-b9d02c9b8141",
        "refsource": "CONFIRM",
        "tags": [
          "Exploit",
          "Third Party Advisory"
        ]
      },
      {
        "url": "https://www.themeum.com/wp-page-builder-updated-v1-2-4/",
        "name": "https://www.themeum.com/wp-page-builder-updated-v1-2-4/",
        "refsource": "MISC",
        "tags": [
          "Patch",
          "Vendor Advisory"
        ]
      }
    ]
  },
  "description": {
    "description_data": [
      {
        "lang": "en",
        "value": "The editor of the WP Page Builder WordPress plugin before 1.2.4 allows lower-privileged users to insert unfiltered HTML, including JavaScript, into pages via the \u201cRaw HTML\u201d widget and the \u201cCustom HTML\u201d widgets (though the custom HTML widget requires sending a crafted request - it appears that this widget uses some form of client side validation but not server side validation), all of which are added via the \u201cpage_builder_data\u201d parameter when performing the \u201cwppb_page_save\u201d AJAX action. It is also possible to insert malicious JavaScript via the \u201cwppb_page_css\u201d parameter (this can be done by closing out the style tag and opening a script tag) when performing the \u201cwppb_page_save\u201d AJAX action."
      }
    ]
  }
}