{
  "data_type": "CVE",
  "data_format": "MITRE",
  "data_version": "4.0",
  "CVE_data_meta": {
    "ID": "CVE-2013-4788",
    "ASSIGNER": "cve@mitre.org"
  },
  "problemtype": {
    "problemtype_data": [
      {
        "description": [
          {
            "lang": "en",
            "value": "CWE-20"
          }
        ]
      }
    ]
  },
  "references": {
    "reference_data": [
      {
        "url": "http://hmarco.org/bugs/CVE-2013-4788.html",
        "name": "http://hmarco.org/bugs/CVE-2013-4788.html",
        "refsource": "MISC",
        "tags": [
          "Exploit",
          "Patch"
        ]
      },
      {
        "url": "http://www.openwall.com/lists/oss-security/2013/07/15/9",
        "name": "[oss-security] 20130716 Re: CVE-2013-4788 - Eglibc PTR MANGLE bug",
        "refsource": "MLIST",
        "tags": [
          "Exploit",
          "Patch"
        ]
      },
      {
        "url": "http://www.mandriva.com/security/advisories?name=MDVSA-2013:283",
        "name": "MDVSA-2013:283",
        "refsource": "MANDRIVA",
        "tags": []
      },
      {
        "url": "http://www.mandriva.com/security/advisories?name=MDVSA-2013:284",
        "name": "MDVSA-2013:284",
        "refsource": "MANDRIVA",
        "tags": []
      },
      {
        "url": "http://seclists.org/fulldisclosure/2015/Sep/23",
        "name": "20150907 Glibc Pointer guarding weakness",
        "refsource": "FULLDISC",
        "tags": []
      },
      {
        "url": "http://www.securityfocus.com/bid/61183",
        "name": "61183",
        "refsource": "BID",
        "tags": []
      },
      {
        "url": "https://security.gentoo.org/glsa/201503-04",
        "name": "GLSA-201503-04",
        "refsource": "GENTOO",
        "tags": []
      }
    ]
  },
  "description": {
    "description_data": [
      {
        "lang": "en",
        "value": "The PTR_MANGLE implementation in the GNU C Library (aka glibc or libc6) 2.4, 2.17, and earlier, and Embedded GLIBC (EGLIBC) does not initialize the random value for the pointer guard, which makes it easier for context-dependent attackers to control execution flow by leveraging a buffer-overflow vulnerability in an application and using the known zero value pointer guard to calculate a pointer address."
      }
    ]
  }
}