{
  "data_type": "CVE",
  "data_format": "MITRE",
  "data_version": "4.0",
  "CVE_data_meta": {
    "ID": "CVE-2012-0028",
    "ASSIGNER": "secalert@redhat.com"
  },
  "problemtype": {
    "problemtype_data": [
      {
        "description": [
          {
            "lang": "en",
            "value": "CWE-264"
          }
        ]
      }
    ]
  },
  "references": {
    "reference_data": [
      {
        "url": "https://github.com/torvalds/linux/commit/8141c7f3e7aee618312fa1c15109e1219de784a7",
        "name": "https://github.com/torvalds/linux/commit/8141c7f3e7aee618312fa1c15109e1219de784a7",
        "refsource": "CONFIRM",
        "tags": [
          "Exploit",
          "Patch"
        ]
      },
      {
        "url": "https://bugzilla.redhat.com/show_bug.cgi?id=771764",
        "name": "https://bugzilla.redhat.com/show_bug.cgi?id=771764",
        "refsource": "CONFIRM",
        "tags": []
      },
      {
        "url": "http://ftp.osuosl.org/pub/linux/kernel/v2.6/ChangeLog-2.6.28",
        "name": "http://ftp.osuosl.org/pub/linux/kernel/v2.6/ChangeLog-2.6.28",
        "refsource": "CONFIRM",
        "tags": []
      },
      {
        "url": "http://www.openwall.com/lists/oss-security/2012/05/08/1",
        "name": "[oss-security] 20120508 Re: CVE Request -- kernel: futex: clear robust_list on execve",
        "refsource": "MLIST",
        "tags": []
      },
      {
        "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=8141c7f3e7aee618312fa1c15109e1219de784a7",
        "name": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=8141c7f3e7aee618312fa1c15109e1219de784a7",
        "refsource": "MISC",
        "tags": []
      }
    ]
  },
  "description": {
    "description_data": [
      {
        "lang": "en",
        "value": "The robust futex implementation in the Linux kernel before 2.6.28 does not properly handle processes that make exec system calls, which allows local users to cause a denial of service or possibly gain privileges by writing to a memory location in a child process."
      }
    ]
  }
}